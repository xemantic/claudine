plugins {
  alias(libs.plugins.kotlin.multiplatform)
  alias(libs.plugins.kotlin.plugin.serialization)
  alias(libs.plugins.versions)
}

repositories {
  mavenCentral()
  mavenLocal()
}

kotlin {

  applyDefaultHierarchyTemplate()

  jvm {
    // withJava()
  }

  linuxX64 {
    binaries {
      executable {
        entryPoint = "com.xemantic.claudine.main"
      }
    }
  }

  sourceSets {

    commonMain {
      dependencies {
        implementation(libs.kotlinx.coroutines.core)
        implementation(libs.anthropic.sdk.kotlin)
      }
    }

    val jvmAndPosix by creating {
      dependsOn(commonMain.get())
      dependencies {
        implementation(libs.kotlinx.serialization.json) // TODO is it runtimeOnly?

        implementation(libs.kotlinx.io)
        implementation(libs.kotlin.logging)
      }
    }

    jvmMain {
      dependsOn(jvmAndPosix)
      dependencies {
        implementation(libs.ktor.client.java)
        implementation(libs.ktor.client.core)
        implementation(libs.ktor.client.content.negotiation)
        implementation(libs.ktor.client.logging)
        implementation(libs.ktor.serialization.kotlinx.json) // TODO is it runtimeOnly?
        implementation(libs.log4j.slf4j2)
        implementation(libs.log4j.core)
        implementation(libs.jackson.databind)
        implementation(libs.jackson.dataformat.yaml)
      }
    }

    nativeMain {
      dependsOn(jvmAndPosix)
      dependencies {
        implementation(libs.ktor.client.curl)
      }
    }

  }

}

//afterEvaluate {
//  tasks.forEach {
//    println("Task: $it")
//    //standardInput = System.`in`
//  }
//
//  tasks.getByName<JavaExec>("run") {
//    println("Task: $this")
//    standardInput = System.`in`
//    //classpath(tasks.getByName<Jar>("jvmJar")) // so that the JS artifacts generated by `jvmJar` can be found and served
//  }
//}

tasks.withType<JavaExec>().configureEach {
  standardInput = System.`in`
}
